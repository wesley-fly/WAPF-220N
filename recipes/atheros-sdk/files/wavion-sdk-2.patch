--- a/rootfs/cgiCommon/etc/inittab	2011-12-01 03:10:40.000000000 +0800
+++ b/rootfs/cgiCommon/etc/inittab	2012-06-27 17:34:31.402048622 +0800
@@ -1,4 +1,4 @@
 ::sysinit:/etc/rc.d/rcS
-::respawn:/sbin/getty ttyS0 115200
+::askfirst:-/bin/sh
 ::shutdown:/etc/ath/killVAP all
-::shutdown:/bin/umount -a
+::shutdown:/bin/umount -a -r


--- a/rootfs/pb9x-2.6.31/etc/rc.d/rcS	2011-12-01 03:10:41.000000000 +0800
+++ b/rootfs/pb9x-2.6.31/etc/rc.d/rcS	2012-06-26 16:26:19.834452167 +0800
@@ -3,125 +3,39 @@
 # This script runs when init it run during the boot process.
 # Mounts everything in the fstab
 
-mount -a
-mount -o remount +w /
-
-#
-# Mount the RAM filesystem to /tmp
-#
-
+# Remount read/write mount /proc mount /sys mount devpts mount the RAM filesystem to /tmp
+mount -o remount,rw / >/dev/null 2>/dev/null
+mount -t proc proc /proc
+mount -t sysfs sys /sys
+mount -t devpts devpts /dev/pts
 mount -t ramfs -n none /tmp
 
 export PATH=$PATH:/etc/ath
-##
-## Export the current system configuration
-##
 
 . /etc/ath/apcfg
 
-##
-## Bring up the network
-##
-insmod /lib/modules/2.6.31/net/flowmac_mod.ko 
-insmod /lib/modules/2.6.31/net/athrs_gmac.ko flowmac_on=${LAN_WLAN_FLOWCONTROL:=0}
-insmod /lib/modules/2.6.31/i2s/ar7240_i2s.ko
-
+#insmod /lib/modules/2.6.31/net/athrs_gmac.ko
 
 ifconfig $WAN_IF up
 ifconfig $LAN_IF up
-# enable/disable flow control
-# Ideally we should have enabled/disabled per interface. But there are 
-# only interface physically and all 5 ports are in it. So it is enough that
-# we enable only one device
-intf=0
-txfctl=0
-rxfctl=0
-cfg_force=0
-#get device specific flow control configuration
-if [ "${intf}" -eq "0" ]; then
-    flbits=${ETH_FLOW_CONTROL0}
-else
-    flbits=${ETH_FLOW_CONTROL1}
-fi
-# 0 - is default for device, what ever driver chooses
-#   2.6.15 seems choosing 0 for flow control on
-#   2.6.31 seems choosing no flow control at all
-# 1 - allow tx flow control
-# 2 - allow rx flow control
-# 3 - allow both tx and rx flow control
-if [ "${flbits}" -ne 0 ]; then
-    case ${flbits} in
-        1)
-            txfctl=1
-            cfg_force=1
-            ;;
-        2) 
-            rxfctl=1
-            cfg_force=1
-            ;;
-        3)
-            txfctl=1
-            rxfctl=1
-            cfg_force=1
-            ;;
-        4) 
-            txfctl=0
-            rxfctl=0;
-            cfg_force=1
-            ;;
-        *)
-            txfctl=0
-            rxfctl=0
-            cfg_force=0
-            ;;
-    esac;
-fi
-if [ "${cfg_force}" -eq "1" ]; then
-    
-    ethreg --txfctl -i eth${intf} -v ${txfctl}
-    ethreg --rxfctl -i eth${intf} -v ${rxfctl}
-    for i in 0 1 2 3 4 5
-    do
-        ethreg --txfctl -i eth${intf} -p $i -v ${txfctl}
-        ethreg --rxfctl -i eth${intf} -p $i -v ${rxfctl}
-    done
-fi
+
 /etc/rc.d/rc.network
 /etc/rc.d/rc.bridge
 
-#
-# Enable USB
-#
-hci=o	# for python
-grep virian /proc/cmdline > /dev/null 2>&1
-[ $? -eq 0 ] && hci=e	# for virian
-
-insmod /lib/modules/2.6.31/usb/usbcore.ko
-insmod /lib/modules/2.6.31/usb/${hci}hci-hcd.ko
-insmod /lib/modules/2.6.31/usb/usb-storage.ko
-insmod /lib/modules/2.6.31/usb/usbnet.ko
-insmod /lib/modules/2.6.31/usb/cdc_ether.ko
-
-#
 # Untar the debug tools into /tmp/tools
-#
-
 mkdir /tmp/tools
 cd /tmp/tools
 tar -xzvf /sbin/debug.tgz
 export PATH=$PATH:/tmp/tools
 
 /usr/sbin/telnetd
-/usr/sbin/httpd -h /usr/www/
-/bin/factoryreset /dev/freset
+#/usr/sbin/httpd -h /usr/www/
+#/bin/factoryreset /dev/freset
 
 # start the page cache/kmem cache cleanup timer in the kernel
 echo 1 > /proc/sys/vm/drop_caches
 
-##
 ## Determine if auto start of AP is required
-##
-
 if [ "${WLAN_ON_BOOT}" = "y" ]; then
     /etc/ath/apup
 fi

--- a/build/Makefile	2012-06-26 14:44:54.293741438 +0800
+++ b/build/Makefile	2012-06-26 14:46:22.961744494 +0800
@@ -207,7 +207,7 @@
 export HAL=$(TOPDIR)/wlan/madwifi/hal/main
 export ATH_PHYERR=$(TOPDIR)/wlan/madwifi/dfs
 export ATH_RATE=$(TOPDIR)/wlan/madwifi/ratectrl11n/
-export MODULEPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/net
+export MODULEPATH=$(INSTALL_ROOT)/lib/modules/2.6.35/net
 
 # This is to allow the target file system size to be specified on the command
 # line, if desired


--- a/build/scripts/pb9x-2.6.31/config.pb9x-2.6.31	2011-12-01 03:09:25.000000000 +0800
+++ b/build/scripts/pb9x-2.6.31/config.pb9x-2.6.31	2012-06-28 12:00:58.316613583 +0800
@@ -58,6 +58,8 @@
 export AH_SUPPORT_2317=0
 export AH_SUPPORT_2425=0
 export AH_SUPPORT_AR5416=1
+
+export BUILD_WPA2=y
 #
 # Environmental variables used to configure the HAL/ATH layers at compile time
 #
@@ -89,7 +91,7 @@
 
 export ATH_SUPPORT_QUICK_KICKOUT=1
 
-export ATH_SUPPORT_FLOWMAC_MODULE=1
+export ATH_SUPPORT_FLOWMAC_MODULE=0
 ifeq ($(ATH_SUPPORT_FLOWMAC_MODULE), 1)
 export CONFIG_FLOWMAC_MODULE=1
 else

--- a/drivers/wlan/os/linux/BuildCaps.inc	2011-12-01 03:09:32.000000000 +0800
+++ b/drivers/wlan/os/linux/BuildCaps.inc	2012-06-27 11:00:14.932818561 +0800
@@ -288,7 +288,7 @@
 endif
 
 ifndef NO_SIMPLE_CONFIG
-export NO_SIMPLE_CONFIG=0
+export NO_SIMPLE_CONFIG=1
 endif
 
 ifndef ATH_DEFINE_ENDIAN

--- a/rootfs/cgiCommon/etc/rc.d/rc.wlan	2011-12-01 03:10:40.000000000 +0800
+++ b/rootfs/cgiCommon/etc/rc.d/rc.wlan	2012-06-27 15:20:13.225356139 +0800
@@ -26,18 +26,18 @@
 
 _ath_unload()
 {
-    rmmod wlan_scan_ap
-    rmmod wlan_scan_sta
+#    rmmod wlan_scan_ap
+#    rmmod wlan_scan_sta
     rmmod ath_pktlog
     sleep 2
-    rmmod wlan_me
-    sleep 2
+#    rmmod wlan_me
+#    sleep 2
     rmmod umac
     sleep 2
     rmmod ath_dev
-    rmmod hst_tx99
+#    rmmod hst_tx99
     rmmod ath_dfs
-    rmmod ath_spectral
+#    rmmod ath_spectral
     rmmod ath_rate_atheros
     rmmod ath_hal
     rmmod asf
@@ -90,15 +90,15 @@
     insmod $MODULE_PATH/asf.ko
     insmod $MODULE_PATH/ath_hal.ko
     insmod $MODULE_PATH/ath_rate_atheros.ko
-    insmod $MODULE_PATH/ath_spectral.ko $SPECTRAL_ARGS
+#    insmod $MODULE_PATH/ath_spectral.ko $SPECTRAL_ARGS
     if [ "${AP_NO_A_BAND}" != "1" ]; then
         #load DFS if A band is supported,default is supported and set AP_NO_A_BAND=1 if not supported
         insmod $MODULE_PATH/ath_dfs.ko $DFS_ARGS
     fi
-    insmod $MODULE_PATH/hst_tx99.ko
+#    insmod $MODULE_PATH/hst_tx99.ko
     insmod $MODULE_PATH/ath_dev.ko
     insmod $MODULE_PATH/umac.ko flowmac_on=${LAN_WLAN_FLOWCONTROL:=0}
-    insmod $MODULE_PATH/wlan_me.ko
+#    insmod $MODULE_PATH/wlan_me.ko
     insmod $MODULE_PATH/ath_pktlog.ko
 
 # Remove the temporary file to notify VAP creation  is successful

--- a/rootfs/cgiCommon/etc/ath/apdown	2011-12-01 03:10:40.000000000 +0800
+++ b/rootfs/cgiCommon/etc/ath/apdown	2012-06-27 15:24:13.033364421 +0800
@@ -4,7 +4,7 @@
 ##
 
 WPS_LED_OFF=1
-echo $WPS_LED_OFF  > /proc/simple_config/simple_config_led  
+#echo $WPS_LED_OFF  > /proc/simple_config/simple_config_led  
 
 KER_VER_31=`set | uname -a | grep -c "2.6.31"`
 if [ "${KER_VER_31}" = 1 ]; then

--- a/rootfs/cgiCommon/etc/rc.d/rc.wlan	2013-02-20 17:21:11.376086499 +0800
+++ b/rootfs/cgiCommon/etc/rc.d/rc.wlan	2013-02-22 11:29:25.204940717 +0800
@@ -109,6 +109,17 @@
 # the iwpriv command.  This will be common for all VAPs
 #
 
+    if [ $ATH_isoutdoor = "1" ]; then
+        iwpriv wifi0 setCountry $ATH_country\O
+    else
+        iwpriv wifi0 setCountry $ATH_country\I
+    fi
+    if [ $ATH_isoutdoor_2 = "1" ]; then
+        iwpriv wifi1 setCountry $ATH_country_2\O
+    else
+        iwpriv wifi1 setCountry $ATH_country_2\I
+    fi
+
     if [ "$ATH_countrycode" != "" ]; then
         iwpriv wifi0 setCountryID $ATH_countrycode


