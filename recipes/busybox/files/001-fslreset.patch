--- a/miscutils/Kbuild.src	2013-03-21 10:07:34.504604739 +0800
+++ b/miscutils/Kbuild.src	2013-03-21 10:46:56.928680341 +0800
@@ -49,3 +49,4 @@
 lib-$(CONFIG_VOLNAME)     += volname.o
 lib-$(CONFIG_WALL)        += wall.o
 lib-$(CONFIG_WATCHDOG)    += watchdog.o
+lib-$(CONFIG_FSLRESET)       += fslreset.o

--- a/miscutils/Config.src	2013-03-21 10:07:34.504604739 +0800
+++ b/miscutils/Config.src	2013-03-21 10:47:49.764682027 +0800
@@ -653,5 +653,12 @@
 	  watchdog applet ever fails to write the magic character within a
 	  certain amount of time, the watchdog device assumes the system has
 	  hung, and will cause the hardware to reboot.
+config FSLRESET
+        bool "fslreset"
+        default y
+        help
+          freescale sw reset.
+
+
 
 endmenu

--- a/include/applets.src.h	2013-03-21 10:07:34.424604750 +0800
+++ b/include/applets.src.h	2013-03-21 10:51:42.860689488 +0800
@@ -164,6 +164,7 @@
 //IF_E2FSCK(APPLET_ODDNAME(fsck.ext2, e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_ext2))
 //IF_E2FSCK(APPLET_ODDNAME(fsck.ext3, e2fsck, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_ext3))
 IF_FSCK_MINIX(APPLET_ODDNAME(fsck.minix, fsck_minix, _BB_DIR_SBIN, _BB_SUID_DROP, fsck_minix))
+IF_FSLRESET(APPLET(fslreset, _BB_DIR_USR_BIN, _BB_SUID_DROP))
 IF_FSYNC(APPLET_NOFORK(fsync, fsync, _BB_DIR_BIN, _BB_SUID_DROP, fsync))
 IF_FTPD(APPLET(ftpd, _BB_DIR_USR_SBIN, _BB_SUID_DROP))
 IF_FTPGET(APPLET_ODDNAME(ftpget, ftpgetput, _BB_DIR_USR_BIN, _BB_SUID_DROP, ftpget))

--- a/include/usage.src.h	2013-03-21 10:07:34.424604750 +0800
+++ b/include/usage.src.h	2013-03-21 11:19:58.260743740 +0800
@@ -4798,6 +4798,14 @@
      "\n" \
      "\nUse 500ms to specify period in milliseconds" \
 
+#define fslreset_trivial_usage \
+       "[-F] DEV"
+#define fslreset_full_usage "\n\n" \
+       "Periodically write to fslreset device DEV\n" \
+     "\nOptions:" \
+     "\n        -F      Run in foreground" \
+     "\n" \
+
 #define wc_trivial_usage \
        "[OPTIONS] [FILE]..."
 #define wc_full_usage "\n\n" \

--- /dev/null	2013-03-21 08:59:00.131108350 +0800
+++ b/miscutils/fslreset.c	2013-03-21 13:35:19.505003621 +0800
@@ -0,0 +1,67 @@
+#include "libbb.h"
+#include <stdio.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <signal.h>
+#include <poll.h>
+#include <sys/ioctl.h>
+#include <sys/reboot.h>
+#include "busybox.h"
+
+static volatile int fd = 0;
+
+static void siginthnd(int signo)
+{
+    printf("signal caught. closing fr device\n");
+    if (fd != 0)
+        close(fd);
+    exit(0);
+}
+
+int fslreset_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
+int fslreset_main(int argc, char **argv)
+{
+	struct pollfd poll_env;
+
+	if (daemon(0, 1) < 0)
+		bb_perror_msg_and_die("Failed forking factory reset daemon");
+
+	signal(SIGHUP, siginthnd);
+	signal(SIGINT, siginthnd);
+
+	fd = xopen(argv[argc - 1], O_WRONLY);
+
+        if (fd < 0)
+		bb_perror_msg_and_die("Failed to open factory reset device");
+	
+	poll_env.fd = fd;
+	poll_env.events = POLLIN|POLLOUT;
+	while(1) {
+		if(poll(&poll_env, 1, -1) < 0)
+			printf("Poll Call Faild");
+
+		if(poll_env.revents & POLLIN){
+			int cn;
+			printf("5 Seconds to do nothing,just blink status_led 5 times\n");
+			for(cn=0; cn<5; cn++){
+ 	          		system("echo 1 > /proc/status_led");
+				usleep(500*1000);
+	                	system("echo 0 > /proc/status_led");
+				usleep(500*1000);
+			}
+		}
+
+		if(poll_env.revents & POLLOUT){
+			printf("2 Seconds do reboot\n");
+			system("reboot");
+		}
+
+		if(poll_env.revents & POLLERR){
+			printf("More than 20 Seconds, kill the fslreset /dev/freset\n");
+			break;
+		}
+	}
+	
+	return EXIT_SUCCESS;
+}

--- a/miscutils/fslreset.c	2013-05-07 11:45:03.776033851 +0800
+++ b/miscutils/fslreset.c	2013-05-07 11:51:32.060046276 +0800
@@ -36,20 +36,26 @@
 		bb_perror_msg_and_die("Failed to open factory reset device");
 	
 	poll_env.fd = fd;
-	poll_env.events = POLLIN|POLLOUT;
+	poll_env.events = POLLIN|POLLOUT|POLLPRI;
 	while(1) {
 		if(poll(&poll_env, 1, -1) < 0)
 			printf("Poll Call Faild");
 
+		if(poll_env.revents & POLLPRI){
+			printf("10 Seconds to reset default\n");
+			system("tar xvf /etc/backup.tar.gz -C /");
+			system("echo 0 > /proc/status_led");
+                        usleep(500*1000);
+			system("echo 1 > /proc/status_led");
+                        usleep(500*1000);
+                        system("echo 0 > /proc/status_led");
+    			usleep(500*1000);
+			system("reboot");
+		}
 		if(poll_env.revents & POLLIN){
 			int cn;
-			printf("5 Seconds to do nothing,just blink status_led 5 times\n");
-			for(cn=0; cn<5; cn++){
- 	          		system("echo 1 > /proc/status_led");
-				usleep(500*1000);
-	                	system("echo 0 > /proc/status_led");
-				usleep(500*1000);
-			}
+			printf("5 Seconds to do wps PBC\n");
+			
 		}
 
 		if(poll_env.revents & POLLOUT){
@@ -58,8 +64,7 @@
 		}
 
 		if(poll_env.revents & POLLERR){
-			printf("More than 20 Seconds, kill the fslreset /dev/freset\n");
-			break;
+			printf("More than 20 Seconds, do nothing\n");
 		}
 	}
 
--- a/miscutils/fslreset.c	2013-05-10 13:24:45.926890082 +0800
+++ b/miscutils/fslreset.c	2013-05-10 17:59:59.879418531 +0800
@@ -18,6 +18,58 @@
         close(fd);
     exit(0);
 }
+int get_val_by_cfg(char *pcname, char *pcval)
+{
+    char acbuf[128] = {0};
+    char accmd[256] = {0};
+    FILE *fp = NULL;
+    
+    pcval[0] = '\0';
+    sprintf(accmd,"cfg -v %s",pcname);
+
+    fp = popen(accmd,"r");
+    if(NULL == fp)
+    {
+        return;
+    }
+    fgets(acbuf,sizeof(acbuf),fp);
+    if(strlen(acbuf) > 0)
+    {
+        if (acbuf[strlen(acbuf) - 1] == '\n')
+        {
+            acbuf[strlen(acbuf) - 1] = '\0';
+        }
+    }
+    pclose(fp);
+
+    strcpy(pcval,acbuf);
+    return;
+}
+int is_wps_mode(void)
+{
+    char secmode[32] = {0}, secmode2[32] = {0}, cypher[32] = {0}, cypher2[32] = {0}, wps[32] = {0}, wps2[32] = {0};
+    
+    get_val_by_cfg("AP_SECMODE", secmode);
+    get_val_by_cfg("AP_SECMODE_2", secmode2);
+    get_val_by_cfg("AP_CYPHER", cypher);
+    get_val_by_cfg("AP_CYPHER_2", cypher2);
+    get_val_by_cfg("WPS_ENABLE", wps);
+    get_val_by_cfg("WPS_ENABLE_2", wps2);
+
+    if((strcmp(secmode,"WPA") != 0) || (strcmp(secmode2,"WPA") != 0))
+    {
+        return 1;
+    } 
+    else if((strcmp(cypher,"TKIP") == 0) || (strcmp(cypher2,"TKIP") == 0))
+    {
+    	return 1;
+    }
+    else if((strcmp(wps,"0") == 0) || (strcmp(wps2,"0") == 0))
+    {
+	return 1;
+    }
+    return 0;    
+}
 
 int fslreset_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int fslreset_main(int argc, char **argv)
@@ -43,19 +95,37 @@
 
 		if(poll_env.revents & POLLPRI){
 			printf("10 Seconds to reset default\n");
-			system("tar xvf /etc/backup.tar.gz -C /");
+			system("tar xvf /etc/backup.tar.gz -C / > /dev/null");
 			system("echo 0 > /proc/status_led");
                         usleep(500*1000);
 			system("echo 1 > /proc/status_led");
-                        usleep(500*1000);
-                        system("echo 0 > /proc/status_led");
     			usleep(500*1000);
 			system("reboot");
 		}
 		if(poll_env.revents & POLLIN){
-			int cn;
+			int encrymode, i;
 			printf("5 Seconds to do wps PBC\n");
-			
+			encrymode = is_wps_mode();
+			if (encrymode == 1) {
+				system("uci set wireless.@wifi-iface[0].wps=1");
+				system("uci set wireless.@wifi-iface[0].encryption=psk+ccmp");
+				system("uci set wireless.@wifi-iface[0].key=111111111");
+				system("uci set wireless.@wifi-iface[1].wps=1");
+                	        system("uci set wireless.@wifi-iface[1].encryption=psk+ccmp");
+                	        system("uci set wireless.@wifi-iface[1].key=111111111");
+				system("uci commit");
+				system("/sbin/luci-reload network wireless firewall > /dev/null");
+				//system("/sbin/active_wifi > /dev/null");
+				usleep(10000*1000);//wait for wifi active
+			}
+			for (i = 0; i < 5; i++) {
+				system("echo 0 > /proc/status_led");
+                        	usleep(500*1000);
+                        	system("echo 1 > /proc/status_led");
+                        	usleep(500*1000);
+			}
+			system("/sbin/hostapd_cli -i ath0 wps_pbc");
+			system("/sbin/hostapd_cli -i ath1 wps_pbc");
 		}
 
 		if(poll_env.revents & POLLOUT){

--- a/miscutils/fslreset.c	2013-05-10 18:13:50.675445116 +0800
+++ b/miscutils/fslreset.c	2013-05-10 18:41:57.223499086 +0800
@@ -47,14 +47,12 @@
 }
 int is_wps_mode(void)
 {
-    char secmode[32] = {0}, secmode2[32] = {0}, cypher[32] = {0}, cypher2[32] = {0}, wps[32] = {0}, wps2[32] = {0};
+    char secmode[32] = {0}, secmode2[32] = {0}, cypher[32] = {0}, cypher2[32] = {0};
     
     get_val_by_cfg("AP_SECMODE", secmode);
     get_val_by_cfg("AP_SECMODE_2", secmode2);
     get_val_by_cfg("AP_CYPHER", cypher);
     get_val_by_cfg("AP_CYPHER_2", cypher2);
-    get_val_by_cfg("WPS_ENABLE", wps);
-    get_val_by_cfg("WPS_ENABLE_2", wps2);
 
     if((strcmp(secmode,"WPA") != 0) || (strcmp(secmode2,"WPA") != 0))
     {
@@ -64,10 +62,6 @@
     {
     	return 1;
     }
-    else if((strcmp(wps,"0") == 0) || (strcmp(wps2,"0") == 0))
-    {
-	return 1;
-    }
     return 0;    
 }
 
@@ -108,10 +102,10 @@
 			encrymode = is_wps_mode();
 			if (encrymode == 1) {
 				system("uci set wireless.@wifi-iface[0].wps=1");
-				system("uci set wireless.@wifi-iface[0].encryption=psk+ccmp");
+				system("uci set wireless.@wifi-iface[0].encryption=psk2+ccmp");
 				system("uci set wireless.@wifi-iface[0].key=111111111");
 				system("uci set wireless.@wifi-iface[1].wps=1");
-                	        system("uci set wireless.@wifi-iface[1].encryption=psk+ccmp");
+                	        system("uci set wireless.@wifi-iface[1].encryption=psk2+ccmp");
                 	        system("uci set wireless.@wifi-iface[1].key=111111111");
 				system("uci commit");
 				system("/sbin/luci-reload network wireless firewall > /dev/null");

--- aaa/miscutils/fslreset.c	2013-05-21 17:13:39.488327930 +0800
+++ bbb/miscutils/fslreset.c	2013-05-21 17:14:06.048327575 +0800
@@ -47,12 +47,14 @@
 }
 int is_wps_mode(void)
 {
-    char secmode[32] = {0}, secmode2[32] = {0}, cypher[32] = {0}, cypher2[32] = {0};
+    char secmode[32] = {0}, secmode2[32] = {0}, cypher[32] = {0}, cypher2[32] = {0}, wps_state[32] = {0}, wps_state2[32] = {0};
     
     get_val_by_cfg("AP_SECMODE", secmode);
     get_val_by_cfg("AP_SECMODE_2", secmode2);
     get_val_by_cfg("AP_CYPHER", cypher);
     get_val_by_cfg("AP_CYPHER_2", cypher2);
+    get_val_by_cfg("WPS_ENABLE", wps_state);
+    get_val_by_cfg("WPS_ENABLE_2", wps_state2);
 
     if((strcmp(secmode,"WPA") != 0) || (strcmp(secmode2,"WPA") != 0))
     {
@@ -62,6 +64,10 @@
     {
     	return 1;
     }
+    else if((strcmp(wps_state,"2") != 0) || (strcmp(wps_state2,"2") != 0))
+    {
+	return 1;
+    }
     return 0;    
 }
 
	
