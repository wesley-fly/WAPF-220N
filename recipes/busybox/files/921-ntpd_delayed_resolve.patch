--- busybox-1.17.1/networking/ntpd.c	2010-07-06 10:25:54.000000000 +0800
+++ busybox-1.17.1new/networking/ntpd.c	2013-02-04 13:18:08.443876397 +0800
@@ -200,6 +200,7 @@
 typedef struct {
 	len_and_sockaddr *p_lsa;
 	char             *p_dotted;
+	char             *p_hostname;
 	/* when to send new query (if p_fd == -1)
 	 * or when receive times out (if p_fd >= 0): */
 	int              p_fd;
@@ -629,8 +630,9 @@
 	peer_t *p;
 
 	p = xzalloc(sizeof(*p));
-	p->p_lsa = xhost2sockaddr(s, 123);
-	p->p_dotted = xmalloc_sockaddr2dotted_noport(&p->p_lsa->u.sa);
+	p->p_hostname = s;
+	p->p_lsa = NULL;
+	p->p_dotted = NULL;
 	p->p_fd = -1;
 	p->p_xmt_msg.m_status = MODE_CLIENT | (NTP_VERSION << 3);
 	p->next_action_time = G.cur_time; /* = set_next(p, 0); */
@@ -679,6 +681,24 @@
 	 *
 	 * Uncomment this and use strace to see it in action:
 	 */
+	/* See if the peer hostname already resolved yet, if not, retry to resolv and return on failure */
+        if (!p->p_lsa)
+	{
+	               p->p_lsa = host2sockaddr(p->p_hostname, 123);
+	
+	               if (p->p_lsa)
+	               {
+	                       p->p_dotted = xmalloc_sockaddr2dotted_noport(&p->p_lsa->u.sa);
+	                       VERB1 bb_error_msg("resolved peer %s to %s", p->p_hostname, p->p_dotted);
+	               }
+	               else
+	               {
+	                       set_next(p, RETRY_INTERVAL);
+	                       VERB1 bb_error_msg("could not resolve peer %s, skipping", p->p_hostname);
+	                       return;
+	               }
+       }
+
 #define PROBE_LOCAL_ADDR /* { len_and_sockaddr lsa; lsa.len = LSA_SIZEOF_SA; getsockname(p->query.fd, &lsa.u.sa, &lsa.len); } */
 
 	if (p->p_fd == -1) {
